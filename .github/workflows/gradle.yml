# Workflow의 이름
name: Java CI with Gradle

# Event : 실행되는 시점을 설정
# main이라는 브랜치에 push될 때 아래 Workflow를 실행
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 하나의 Workflow는 1개 이상의 Job으로 구성됨
# 여러 Job은 기본적으로 병렬적으로 수행됨
jobs:
  # Job을 식별하기 위한 id
  My-Deploy-Job:
    # Ubuntu 환경 / 가장 최신 버전(latest)
    runs-on: ubuntu-latest
    permissions:
      contents: read

    # Step : 특정 작업을 수행하는 가장 작은 단위
    # Job은 여러 Step들로 구성되어 있음
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 환경 변수로 중요한 데이터 처리 (application-secret.yml)
#      - name: Create application-secret.yml with environment variables
#        run: |
#          touch ./src/main/resources/application-secret.yml
#          echo "CARROTMOA_TOTAL_ENV_KEY: \"${{ secrets.CARROTMOA_TOTAL_ENV_KEY }}\"" > ./src/main/resources/application-secret.yml

      # gradlew에 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드 (테스트 제외, 종속성 새로 고침)
      - name: Build with Gradle (No Daemon)
        run: ./gradlew clean build --no-daemon --exclude-task test --refresh-dependencies

      # Gradle 빌드 후, build/libs 폴더에 생성된 JAR 파일을 아티팩트로 업로드
      - name: Upload JAR file as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: carrot-moa-jar
          path: build/libs/*.jar

      # Docker 이미지 빌드 (캐시 없이 새로 빌드)
      - name: Build docker image
        run: docker build -t jaeeun111/carrotmoa_mine .

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker Hub에 이미지 푸시
      - name: Publish to Docker Hub
        run: docker push jaeeun111/carrotmoa_mine

      # https://github.com/marketplace/actions/ssh-remote-commands
      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.WAS_HOST }} # ec2 퍼블릭 IPv4 주소 or 퍼블릭 IPv4 DNS
          username: ${{ secrets.WAS_USERNAME }} # ec2 연결 시 사용자 이름
          key: ${{ secrets.SSH_KEY }} # 키 페어 전체 붙여넣기
          port: ${{ secrets.WAS_SSH_PORT }} # 인바운드 규칙 SSH 포트 (기본적으로 22)
          script: | 
            # Jasypt 비밀번호 환경 변수 설정
            export JASYPT_PASSWORD="${{ secrets.JASYPT_PASSWORD }}"
            
            # 모든 기존 컨테이너 중지 및 삭제 (실행 중인 컨테이너가 있을 경우)
            docker stop $(docker ps -a -q) || echo "No containers to stop"
            docker rm $(docker ps -a -q) || echo "No containers to remove"
            
            # 최신 Docker 이미지 다운로드
            docker pull jaeeun111/carrotmoa_mine
            
            # docker run -d -e JASYPT_PASSWORD="${{ secrets.JASYPT_PASSWORD }}" -p 8080:8080 -p 8081:8081 --name myCarrotContainer jaeeun111/carrotmoa_mine:latest
            
            docker run -d -e JASYPT_PASSWORD="${{ secrets.JASYPT_PASSWORD }}" -p 8080:8080 --name myCarrotContainer8080 jaeeun111/carrotmoa_mine:latest --server.port=8080
            docker run -d -e JASYPT_PASSWORD="${{ secrets.JASYPT_PASSWORD }}" -p 8081:8081 --name myCarrotContainer8081 jaeeun111/carrotmoa_mine:latest --server.port=8081

#      - name: Github Actions 자체에 저장되어 있는 변수 사용해보기
#        run: |
#          echo $GITHUB_SHA
#          echo $GITHUB_REPOSITORY
