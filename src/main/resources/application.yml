spring:
  application:
    name: carrot-moa

  # 빈 덮어쓰기
#  main:
#    allow-bean-definition-overriding: true

  profiles:
    include: secret
    active: prod

  jpa:
    properties:
      hibernate.dialect: org.hibernate.dialect.MySQLDialect
      hibernate:
        show_sql: true
        format_sql: true
        use_sql_comments: true
    hibernate:
      ddl-auto: none

  mvc:
    view:
      suffix: .html

  thymeleaf:
    suffix: .html
    cache: false

  mail:
    host: ENC(IJvL9LNFRf5yJNTb7q6Tc621r8tnzVRS)
    port: 587
    username: ENC(BEXdGxV7CaH7mhxG0/ByZYEQ1ck59i9lxi2n70u4u0c=)
    password: ENC(t9RHsbCNwYNowg5g5IZ3oXSBuoeBwDIdgMqDdE9bjms=)
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
      mail.smtp.starttls.required: true
      mail.smtp.connection-timeout: 5000
      mail.smtp.timeout: 5000
      mail.smtp.write-timeout: 5000
    auth-code-expiration-millis: 180000

  user:
    profile:
      default-image: https://carrots-bucket.s3.ap-northeast-2.amazonaws.com/room/1/257890f7-73c7-4a76-962e-0191137c1311.jpg

  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 20MB

  tomcat:
    connection-timeout: 3000s

logging:
  level:
    org:
      springframework:
#        cache: TRACE
#        security:
#          DEBUG
#        security.web: DEBUG
#        security.authentication: DEBUG
#        security.core: DEBUG
        retry: DEBUG  # Spring Retry 관련 로그를 DEBUG 레벨로 출력
        retry.internal: DEBUG  # 내부 리트라이 관련 상세 로그 출력
    io.github.resilience4j: DEBUG  # Resilience4j 관련 모든 로그를 DEBUG 레벨로 출력
    io.github.resilience4j.circuitbreaker: DEBUG  # Resilience4j의 CircuitBreaker 관련 로그를 DEBUG 레벨로 출력



cloud:
  aws:
    credentials:
      access-key: ENC(iWioHko2n4bPtihvgu8LNq/Sj0OQ/yVWkJK5SJTrBXY=)
      secret-key: ENC(eBiqenBdaISdo2YXGJaVzhVsUGJRyFSY9HSssrIx/3lVzXmgE9DQJ8naGSez5kvUC8f4ohFonGU=)
    region:
      static: ap-northeast-2
    stack:
      auto: false
    s3:
      bucket: carrots-bucket

payment:
  imp-key: ENC(LbVJf8TdGq/jKya+emcEAIuOV6MxTz1EjbrY3GqKCK4=)
  imp-secret: ENC(AQMCQXidLOtv6rrkiYxVss0L+Kbjj4GMJRIy8et4a0cJIvsQjPAe2ByLN5Pmsr9HTgzKMwnu+Bk3E6SlZgXzQYXVYywSgMDODBmOYtaNhcxBvWn+wAYZ78N6jtCwt4W7)
  base-url: https://api.iamport.kr

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowType: COUNT_BASED
      minimumNumberOfCalls: 7                                   # 최소 7번까지는 무조건 CLOSE로 가정하고 호출한다.
      slidingWindowSize: 10                                     # (minimumNumberOfCalls 이후로는) 10개의 요청을 기준으로 판단한다.
      waitDurationInOpenState: 10s                              # OPEN 상태에서 HALF_OPEN으로 가려면 얼마나 기다릴 것인가?

      failureRateThreshold: 40                                  # slidingWindowSize 중 몇 %가 recordException이면 OPEN으로 만들 것인가?

      slowCallDurationThreshold: 3000                           # 몇 ms 동안 요청이 처리되지 않으면 실패로 간주할 것인가?
      slowCallRateThreshold: 60                                 # slidingWindowSize 중 몇 %가 slowCall이면 OPEN으로 만들 것인가?

      permittedNumberOfCallsInHalfOpenState: 5                  # HALF_OPEN 상태에서 5번까지는 CLOSE로 가기위해 호출한다.
      automaticTransitionFromOpenToHalfOpenEnabled: true        # OPEN 상태에서 자동으로 HALF_OPEN으로 갈 것인가?

      eventConsumerBufferSize: 10                               # actuator를 위한 이벤트 버퍼 사이즈

      recordExceptions:
#        - carrotmoa.carrotmoa.exception.ClientErrorException
#        - carrotmoa.carrotmoa.exception.MissingParameterException
#        - carrotmoa.carrotmoa.exception.UnAuthorizedException
#        - org.springframework.web.client.RestClientException
         - org.springframework.data.redis.RedisConnectionFailureException
         - java.util.concurrent.TimeoutException
         - org.springframework.web.client.RestClientException
      ignoreExceptions:
        - carrotmoa.carrotmoa.exception.IgnoreException
  instances:
    simpleCircuitBreakerConfig:
      baseConfig: default






